# Makefile for simple_stack eBPF sampler and slow target application

# Compilers and Tools
CXX = g++
CC = gcc
CLANG = clang
BPFTOOL = bpftool

# Source Files
SLOW_SRC = slow.cpp
STACK_USER_SRC = simple_stack.c
STACK_BPF_SRC = simple_stack.bpf.c

# BPF Objects and Generated Files
STACK_BPF_OBJ = $(STACK_BPF_SRC:.bpf.c=.bpf.o)
STACK_SKEL = $(STACK_BPF_SRC:.bpf.c=.skel.h)
VMLINUX_H = vmlinux.h # Will be generated by this Makefile

# Target Executables
TARGET_SLOW = slow
TARGET_STACK = simple_stack
TARGETS = $(TARGET_SLOW) $(TARGET_STACK)

# Compiler Flags
BASE_CFLAGS = -Wall -O2 -g
# --- MODIFIED CXXFLAGS ---
# Add -fno-omit-frame-pointer explicitly for C++ target
# Add -fno-inline to disable function inlining
CXXFLAGS = $(BASE_CFLAGS) -std=c++11 -fno-omit-frame-pointer -fno-inline
CFLAGS = $(BASE_CFLAGS)
# BPF specific flags (adjust include path if needed)
BPF_CFLAGS = -g -O2 -target bpf -c
# User-space BPF loader linker flags
LDLIBS = -lbpf -lelf -lz

# Default target: build all executables
.PHONY: all
all: $(TARGETS)

# --- Build Rules ---

# Rule to build the 'slow' C++ application
$(TARGET_SLOW): $(SLOW_SRC)
	@echo ">>> Compiling Target Application $(SLOW_SRC) with frame pointers and no inlining"
	$(CXX) $(CXXFLAGS) $^ -o $@

# Rule to build the 'simple_stack' user-space loader
# Depends on the C source and the generated skeleton header
$(TARGET_STACK): $(STACK_USER_SRC) $(STACK_SKEL)
	@echo ">>> Compiling User Space Loader $(STACK_USER_SRC)"
	$(CC) $(CFLAGS) $< $(LDLIBS) -o $@

# Rule to generate the BPF skeleton header from the BPF object file
$(STACK_SKEL): $(STACK_BPF_OBJ)
	@echo ">>> Generating BPF Skeleton $@"
	$(BPFTOOL) gen skeleton $< > $@

# Rule to compile the BPF C code into a BPF object file
# Depends on the BPF C source and the vmlinux.h header
$(STACK_BPF_OBJ): $(STACK_BPF_SRC) $(VMLINUX_H)
	@echo ">>> Compiling BPF Code $<"
	$(CLANG) $(BPF_CFLAGS) $< -o $@

# Rule to generate vmlinux.h using bpftool
$(VMLINUX_H):
	@echo ">>> Generating $(VMLINUX_H) from kernel BTF..."
	@if [ -f /sys/kernel/btf/vmlinux ]; then \
	    $(BPFTOOL) btf dump file /sys/kernel/btf/vmlinux format c > $@ ; \
	else \
	    echo "ERROR: /sys/kernel/btf/vmlinux not found. Kernel BTF support needed." ; \
	    exit 1 ; \
	fi

# --- Cleanup ---

.PHONY: clean
clean:
	@echo ">>> Cleaning generated files"
	rm -f $(TARGETS) $(STACK_BPF_OBJ) $(STACK_SKEL) $(VMLINUX_H) core *.core core.*

# --- Help ---

.PHONY: help
help:
	@echo "Makefile for simple_stack eBPF sampler and slow target"
	@echo ""
	@echo "Usage:"
	@echo "  make         Build all executables ($(TARGETS))"
	@echo "               (Will automatically generate vmlinux.h if missing)"
	@echo "  make all     Same as 'make'"
	@echo "  make slow    Build only the target application"
	@echo "  make simple_stack Build only the eBPF sampler application"
	@echo "  make clean   Remove all generated files (including vmlinux.h)"
	@echo ""